<?php

declare(strict_types=1);

namespace BitWasp\Test\Wallet\Console\Command\Db;

use BitWasp\Bitcoin\Chain\Params;
use BitWasp\Bitcoin\Chain\ParamsInterface;
use BitWasp\Bitcoin\Math\Math;
use BitWasp\Test\Wallet\TestCase;
use BitWasp\Wallet\Chain;
use BitWasp\Wallet\Console\Command\Db\Init;
use BitWasp\Wallet\DB\DB;
use BitWasp\Wallet\Params\RegtestParams;
use BitWasp\Wallet\Params\TestnetParams;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Tester\CommandTester;

class InitTest extends TestCase
{
    /**
     * @var CommandTester
     */
    private $commandTester;

    /**
     * @var string
     */
    private $sessionDbFile;

    public function setUp()/* The :void return type declaration that should be here would cause a BC issue */
    {
        $application = new Application();
        $application->add(new Init());
        $command = $application->find('db:init');
        $this->commandTester = new CommandTester($command);
        $this->sessionDbFile = sys_get_temp_dir()."/walletman-unittest-dbinit.sqlite";
        if (file_exists($this->sessionDbFile)) {
            unlink($this->sessionDbFile);
        }
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function tearDown()/* The :void return type declaration that should be here would cause a BC issue */
    {
        $this->commandTester = null;
        if (file_exists($this->sessionDbFile)) {
            unlink($this->sessionDbFile);
        }
        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function getTestnetFlags(): array
    {
        $math = new Math();
        $mainnet = new Params($math);
        $testnet = new TestnetParams($math);
        $regtest = new RegtestParams($math);

        return [
            [null, $mainnet],
            ["--testnet", $testnet],
            ["-t", $testnet],
            ["--regtest", $regtest],
            ["-r", $regtest],
        ];
    }

    /**
     * @dataProvider getTestnetFlags
     * @param string $flag
     * @param ParamsInterface $params
     */
    public function testInitBitcoinTestnet(?string $flag, ParamsInterface $params)
    {
        $input = [
            'command'  => "db:init",
            'database' => $this->sessionDbFile,
        ];
        if ($flag) {
            $input[$flag] = null;
        }

        $this->assertEquals(0, $this->commandTester->execute($input));

        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $this->assertContains("Database setup in location: {$this->sessionDbFile}", $output);

        $db = new DB("sqlite:{$this->sessionDbFile}");

        $chain = new Chain();
        $chain->init($db, $params);

        $header = $db->getBestHeader();
        $this->assertEquals($params->getGenesisBlockHeader()->getHash()->getHex(), $header->getHash()->getHex());
    }
}
